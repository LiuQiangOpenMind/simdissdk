namespace simData {

/**
 * simData.proto Defines the underlying data format for SIMDIS SDK's simData module.
 *
 * Entity types include platforms, beams, gates, lasers, projectors, and line of bearing (LOB) group.  Entities are
 * generally broken up into 4 components:
 *
 *   Updates - A single data point, possibly with a high data rate
 *   Properties - Settings for an entity, such as ID that are mostly unchanging
 *   Preferences - Changeable settings for an entity, including Superform-like settings;
 *                 can be time stamped by using Commands
 *   Commands - A time stamp and a (likely) sparse list of preferences to apply at the time
 *
 * Colors are encoded in fixed32, which is more efficient than uint32 when the MSB values are
 * likely to be set.  Colors are defined as 0xRRGGBBAA, with the MSB as part of the red component.
 *
 * Unless otherwise specified, all units are in metric: radians for angles, meters for distance,
 * and meters per second for speed values.
 *
 * Notes on Draw / dataDraw flags: Draw is a user preference.  This is equivalent to the Draw setting
 * in SuperForm.  The dataDraw flag is a data setting that is managed through the data provider and
 * is similar to the On/Off settings in SIMDIS 9.  The dataDraw flag is hierarchical -- a gate is not
 * drawn if its beam's dataDraw is off, and even if the gate's dataDraw and draw flags are true.  The draw flag is not
 * hierarchical.  An entity is only drawn if its dataDraw is on, its host is active, and its draw flag is on.
 * The dataDraw flag is not set for, and is completely ignored by Platforms.
 * Beams and gates still require that their platform host be active, but this is signalled by other means than the dataDraw flag.
 */


/**@enum ModelDrawMode
 * Polygon draw style for models; can draw filled (solid), lines (wireframe), or points
 */
enum ModelDrawMode {
  MDM_SOLID = 0, ///< polygons are filled by surface textures
  MDM_WIRE = 1, ///< model is shown as a wireframe (polygons are lines)
  MDM_POINTS = 2, ///< a cloud of points (no lines between the points of the polygons)
};


/**
 * Settings for how to orient an image icon relative to the eye.  This option is unused unless an
 * image icon (PNG, JPG, BMP, etc.) is loaded for the platform model.
 */
enum IconRotation {

  /**
   * Billboard Pointing Up -- orient the icon so that "up is up" and the full icon always faces viewer
   */
  IR_2D_UP = 0,

  /**
   * Billboard with Yaw -- Orient icon based on yaw of platform it represents.  Icon will always be oriented
   * so that it faces the viewer, but can rotate about the center to reflect platform yaw.
   */
  IR_2D_YAW = 1,

  /**
   * Follow Platform -- orient icon using the yaw, pitch, and roll of the platform it represents.
   */
  IR_3D_YPR = 2,

  /**
   * Flat Oriented North -- Orient the icon flat (zero pitch) with respect to the Earth's surface.  The
   * orientation of the icon will always be facing North.
   */
  IR_3D_NORTH = 3,

  /**
   * Flat with Yaw -- Orient the icon flat (zero pitch) with respect to the Earth's surface.  Orientation
   * of the icon will be rotated based on the y aw of the platform it represents.
   */
  IR_3D_YAW = 4,
};


/**@enum ElapsedTimeFormat
 * Elapsed time formats supported in the SDK.  Elapsed time is a relative measure of time from some epoch.
 */
enum ElapsedTimeFormat {
  ELAPSED_SECONDS = 1,  ///< SS.sssss
  ELAPSED_MINUTES = 2,  ///< MM:SS.sssss
  ELAPSED_HOURS = 3,    ///< HH:MM:SS.sssss
};

/**@enum AngleUnits
 * Units for angular measurement
 */
enum AngleUnits {
  UNITS_RADIANS = 10,                  ///< Radians flag
  UNITS_DEGREES = 11,                  ///< Degrees flag
  UNITS_DEGREES_MINUTES = 12,          ///< DM format
  UNITS_DEGREES_MINUTES_SECONDS = 13,  ///< DMS format
  UNITS_UTM = 14,                      ///< UTM flag
  UNITS_BAM = 15,                      ///< BAM (Binary Angular Measure) flag
  UNITS_MIL = 16,                      ///< Angular Mil (NATO variant) flag
  UNITS_MILLIRADIANS = 17,             ///< Milliradians (0.001 radians) flag
};

/**@enum GeodeticUnits
 * Units for geodetic angular measurement
 */
enum GeodeticUnits {
  GEODETIC_DEGREES = 11,                  ///< Degrees flag
  GEODETIC_DEGREES_MINUTES = 12,          ///< DM format
  GEODETIC_DEGREES_MINUTES_SECONDS = 13,  ///< DMS format
};

/**@enum DistanceUnits
 * Units for distance measurement
 */
enum DistanceUnits {
  UNITS_METERS = 20,         ///< Meters constant flag
  UNITS_KILOMETERS = 21,     ///< Kilometers constant flag
  UNITS_YARDS = 22,          ///< Yards constant flag
  UNITS_MILES = 23,          ///< Statute Miles constant flag
  UNITS_FEET = 24,           ///< Feet constant flag
  UNITS_INCHES = 25,         ///< Inches constant flag
  UNITS_NAUTICAL_MILES = 26, ///< Nautical Miles constant flag
  UNITS_CENTIMETERS = 27,    ///< Centimeters constant flag
  UNITS_MILLIMETERS = 28,    ///< Millimeters constant flag
  UNITS_KILOYARDS = 29,      ///< Kiloyards constant flag
  UNITS_DATAMILES = 30,      ///< Data Miles constant flag
  UNITS_FATHOMS = 31,        ///< Fathoms constant flag
  UNITS_KILOFEET = 32,       ///< Kilofeet constant flag = 1000 feet)
};


/**@enum SpeedUnits
 * Units for speed measurement.
 */
enum SpeedUnits {
  UNITS_METERS_PER_SECOND = 40,     ///< m/s constant flag
  UNITS_KILOMETERS_PER_HOUR = 41,   ///< km/h constant flag
  UNITS_KNOTS = 42,                 ///< knots constant flag
  UNITS_MILES_PER_HOUR = 43,        ///< mph constant flag
  UNITS_FEET_PER_SECOND = 44,       ///< ft/sec constant flag
  // Note: Index 45 is reserved and not for public use.
  UNITS_KILOMETERS_PER_SECOND = 46, ///< km/s constant flag
  UNITS_DATAMILES_PER_HOUR = 47,    ///< Data miles per hour constant flag
  UNITS_YARDS_PER_SECOND = 48,      ///< Yds per second constant flag
};


/**@enum Polarity
 * Enumeration of antenna/rcs polarizations
 */
enum Polarity {
  POL_UNKNOWN = 0,     ///< Unknown polarity
  POL_HORIZONTAL = 1,  ///< Horizontal RCV and XMT polarity
  POL_VERTICAL = 2,    ///< Vertical RCV and XMT polarity
  POL_CIRCULAR = 3,    ///< Circular RCV and XMT polarity
  POL_HORZVERT = 4,    ///< Horizontal RCV and vertical XMT polarity
  POL_VERTHORZ = 5,    ///< Vertical RCV and horizontal XMT polarity
  POL_LEFTCIRC = 6,    ///< Left circular RCV and XMT polarity
  POL_RIGHTCIRC = 7,   ///< Right circular RCV and XMT polarity
  POL_LINEAR = 8,      ///< Linear RCV and XMT polarity
}


/**@class Position
 * Position in 3D space
 */

/**@class BodyOrientation
 * Alignment of a body in 3D space, angles in radians; body centric
 */

/**@class Reference
 * Reference origins, in geodetic coordinates
 */

/**@enum CoordinateSystem
 * Supported geographic reference frames
 */
enum CoordinateSystem {
  NED = 1,   ///< North/East/Down
  NWU = 2,   ///< North/West/Up
  ENU = 3,   ///< East/North/Up
  LLA = 4,   ///< Lat/Lon/Alt
  ECEF = 5,  ///< Earth-centered, Earth-fixed (stationary frame)
  ECI = 6,   ///< Earth-centered, inertial (rotates in time)
  XEAST = 7, ///< Tangent plane, X-axis pointing East
  GTP = 8,   ///< Generic tangent plane that can be rotated and/or translated
};

/**@enum MagneticVariance
 * Magnetic variance to apply to orientation angles
 */
enum MagneticVariance {
  MV_WMM = 1,   ///< Variance based on World Magnetic Model (WMM)
  MV_TRUE = 2,  ///< No variance, also known as True North
  MV_USER = 3,  ///< User defined variance
};

/**@enum VerticalDatum
 * Vertical datum to apply to altitude values in certain systems
 */
enum VerticalDatum {
  VD_WGS84 = 1,  ///< Referenced to WGS-84 ellipsoid
  VD_MSL = 2,    ///< Referenced to Earth Gravity Model (EGM)
  VD_USER = 3,   ///< User defined datum
};

/**@enum PolygonFace
 * Polygon face corresponds to the front, back, or the front-and-back faces
 */
enum PolygonFace {
  FRONT_AND_BACK = 0,  ///< Corresponds to GL_FRONT_AND_BACK
  FRONT = 1,           ///< GL_FRONT
  BACK = 2,            ///< GL_BACK
};

/**@enum PolygonMode
 * Polygon rasterization mode; these values match GL defines, and osg::PolygonMode enum
 */
enum PolygonMode {
  POINT = 0x1B00,   ///< GL_POINT
  LINE = 0x1B01,    ///< GL_LINE
  FILL = 0x1B02,    ///< GL_FILL
};

/**@class CoordinateFrame
 * Coordinate system definition for scenario and platforms
 */
/**@class CoordinateFrame_TangentPlaneOffsets
 * The raw position values are translated by x and y, then rotated clockwise by angle
 */

/**@class TrackPrefs
 * preferences for the display of platform tracks
 */
/**@enum TrackPrefs_Mode
 * mode for drawing track position
 */
enum TrackPrefs_Mode {
    TrackPrefs_Mode_OFF = 0, ///< nothing is drawn
    TrackPrefs_Mode_POINT = 1, ///< draw a point at each previous position
    TrackPrefs_Mode_LINE = 2, ///< draw a line connecting previous positions
    TrackPrefs_Mode_RIBBON = 3, ///< a line with wings showing roll
    TrackPrefs_Mode_BRIDGE = 4, ///< "ribbon" plus a drop line down to the ground
  };

/**@enum TextOutline
 * define the text outline style
 */
enum TextOutline {
  TO_NONE = 0,
  TO_THIN = 1,
  TO_THICK = 2,
};

/**@class LabelPrefs
 * preferences which all labels share
 */
/**@class LabelPrefs_DisplayFields
 */

/**@class LocalGridPrefs
 * a grid attached to an entity
 */
/**@enum LocalGridPrefs_Type
 * shape of local grid
 */
enum LocalGridPrefs_Type {
    LocalGridPrefs_Type_CARTESIAN = 1, ///< a square grid
    LocalGridPrefs_Type_POLAR = 2, ///< circles drawn at each range subdivision, with lines sectoring
    LocalGridPrefs_Type_RANGE_RINGS = 3, ///< polar, with no sector lines
    LocalGridPrefs_Type_SPEED_RINGS = 4, ///< polar rings, where the size is based on speed * time
    LocalGridPrefs_Type_SPEED_LINE = 5, ///< a line drawn out to speed * time
  };
/**@class LocalGridPrefs_SpeedRing
 * settings for SPEED_RINGS mode
 */
/**@class LocalGridPrefs_GridSettings
 * grid division settings (all modes)
 */

/**@class CommonPrefs
 * Preferences shared by all entity types
 */


/**@class ScenarioProperties
 * Global settings for a scene
 */
/**@class ScenarioProperties_Classification
 */
/**@class ScenarioProperties_SoundFile
 */


/**@class PlatformProperties
 * (mostly) unchanging aspects of a platform
 */

/**@class PlatformPrefs
 * preferences for the display of a platform
 */

/**@class PlatformCommand
 * timed update to platform prefs; commands override prefs
 */


/**@class BeamProperties
 * (mostly) unchanging aspects of a beam
 */
/**@enum BeamProperties_BeamType
 * Describes how to interpret data points (updates)
 */
enum BeamProperties_BeamType {
    BeamProperties_BeamType_ABSOLUTE_POSITION = 1, ///< Beam pointing is defined based on data
    BeamProperties_BeamType_BODY_RELATIVE = 2, ///< Beam pointing is relative to host's body orientation
    BeamProperties_BeamType_TARGET = 3, ///< Beam pointing is towards specified target platform
  };

/**@class BeamPrefs
 * preferences for the display of a beam
 */
/**@enum BeamPrefs_DrawMode
 * Beams can be drawn as a wire, as solid, or solid with wires; NOTE: different than Platform's draw mode
 */
enum BeamPrefs_DrawMode {
    BeamPrefs_DrawMode_WIRE = 0,
    BeamPrefs_DrawMode_SOLID = 1,
    BeamPrefs_DrawMode_WIRE_ON_SOLID = 2,
  };
/**@enum BeamPrefs_DrawType
 * Rendering type can draw using a pattern or as a 3 dB beam
 */
enum BeamPrefs_DrawType {
    BeamPrefs_DrawType_BEAM_3DB = 0, ///< Beam drawn using 3 dB half power points
    BeamPrefs_DrawType_ANTENNA_PATTERN = 1, ///< Beam drawn using antenna pattern
    BeamPrefs_DrawType_COVERAGE = 2, ///< Beam drawn as a spherical slice (cap only)
  };
/**@class BeamPrefs_AntennaPattern
 * Describes the beam's antenna pattern settings
 */
/**@enum BeamPrefs_AntennaPattern_Type
 * Antenna patterns can be read from a file or generated from an algorithm
 */
enum BeamPrefs_AntennaPattern_Type {
      BeamPrefs_AntennaPattern_Type_NONE = 0,
      BeamPrefs_AntennaPattern_Type_FILE = 1, ///< File based antenna pattern
      BeamPrefs_AntennaPattern_Type_ALGORITHM = 2, ///< Algorithmic based antenna pattern
    };
/**@enum BeamPrefs_AntennaPattern_FileFormat
 * Different file formats that are supported
 */
enum BeamPrefs_AntennaPattern_FileFormat {
      BeamPrefs_AntennaPattern_FileFormat_TABLE = 6, ///< Look-up table antenna pattern
      BeamPrefs_AntennaPattern_FileFormat_MONOPULSE = 7, ///< Monopulse (sum and delta) antenna pattern
      BeamPrefs_AntennaPattern_FileFormat_RELATIVE_TABLE = 9, ///< Relative look-up table antenna pattern
      BeamPrefs_AntennaPattern_FileFormat_BILINEAR = 10, ///< Bilinear antenna pattern (type of interpolation)
      BeamPrefs_AntennaPattern_FileFormat_NSMA = 11, ///< NSMA antenna pattern format
      BeamPrefs_AntennaPattern_FileFormat_EZNEC = 12, ///< EZNEC antenna pattern format
      BeamPrefs_AntennaPattern_FileFormat_XFDTD = 13, ///< XFDTD antenna pattern format
    };
/**@enum BeamPrefs_AntennaPattern_Algorithm
 * Algorithms that can be used instead of a file
 */
enum BeamPrefs_AntennaPattern_Algorithm {
      BeamPrefs_AntennaPattern_Algorithm_PEDESTAL = 1, ///< Pedestal algorithm
      BeamPrefs_AntennaPattern_Algorithm_GAUSS = 2, ///< Gaussian algorithm
      BeamPrefs_AntennaPattern_Algorithm_CSCSQ = 3, ///< Cosecant squared algorithm
      BeamPrefs_AntennaPattern_Algorithm_SINXX = 4, ///< Sin(x/x) algorithm
      BeamPrefs_AntennaPattern_Algorithm_OMNI = 5, ///< Omni directional algorithm
    };

/**@class BeamUpdate
 * common update to beam data
 */

/**@class BeamCommand
 * timed update to beam prefs; commands override prefs
 */


/**@class GateProperties
 * (mostly) unchanging aspects of a gate
 */
/**@enum GateProperties_GateType
 * Describes how to interpret data points (updates)
 */
enum GateProperties_GateType {
    GateProperties_GateType_ABSOLUTE_POSITION = 1, ///< Gate pointing is defined based on data
    GateProperties_GateType_BODY_RELATIVE = 2, ///< Gate pointing is relative to host's body orientation
    GateProperties_GateType_TARGET = 3, ///< Gate pointing is towards specified target platform
  };

/**@class GatePrefs
 * preferences for the display of a gate
 */
/**@enum GatePrefs_DrawMode
 * Enumerations of different types of gates
 */
enum GatePrefs_DrawMode {
    GatePrefs_DrawMode_UNKNOWN = 0,
    GatePrefs_DrawMode_RANGE = 1,
    GatePrefs_DrawMode_GUARD = 2,
    GatePrefs_DrawMode_// TARGET = 3;
    GatePrefs_DrawMode_ANGLE = 4,
    GatePrefs_DrawMode_RAIN = 5,
    GatePrefs_DrawMode_CLUTTER = 6,
    GatePrefs_DrawMode_FOOTPRINT = 7,
    GatePrefs_DrawMode_SECTOR = 8,
    GatePrefs_DrawMode_PUSH = 9,
    GatePrefs_DrawMode_COVERAGE = 10, ///< Gate rendered as a spherical slice
    GatePrefs_DrawMode_// BODY = 11;
  };
/**@enum GatePrefs_FillPattern
 * Different ways to fill the gate area
 */
enum GatePrefs_FillPattern {
    GatePrefs_FillPattern_STIPPLE = 0,
    GatePrefs_FillPattern_SOLID = 1,
    GatePrefs_FillPattern_ALPHA = 2,
    GatePrefs_FillPattern_WIRE = 3,
    GatePrefs_FillPattern_CENTROID = 4,
  };

/**@class GateUpdate
 * common update to gate data
 */

/**@class GateCommand
 * timed update to gate prefs; commands override prefs
 */


/**@class LaserProperties
 * (mostly) unchanging aspects of a laser
 */

/**@class LaserPrefs
 * preferences for the display of a laser
 */

/**@class LaserUpdate
 * common update to laser data
 */

/**@class LaserCommand
 * timed update to laser prefs; commands override prefs
 */


/**@class ProjectorProperties
 * Unchanging aspects of a projector
 */

/**@class ProjectorPrefs
 * preferences for the display of a projector
 */

/**@class ProjectorUpdate
 * common update to projector data
 */

/**@class ProjectorCommand
 * timed update to projector prefs; commands override prefs
 */


/**@class LobGroupProperties
 * (mostly) unchanging aspects of a line of bearing (LOB) group
 */

/**@class LobGroupPrefs
 * preferences for the display of a line of bearing (LOB) group
 */

/**@class LobGroupUpdatePoint
 * update data point for line of bearing (LOB) group
 */

/**
 common update to line of bearing (LOB) group data, holds a list of LobGroupUpdatePoints.
 Note that when points are inserted, the time of the points inserted must match the time of the update.
*/
/**@class LobGroupUpdate
 */

/**@class LobGroupCommand
 * timed update to line of bearing (LOB) group prefs; commands override prefs
 */


/**@class CategoryData
 * for example: friendly, hostile; ship, plane
 */
/**@class CategoryData_Entry
 */

/**@class GenericData
 * for example: fuel, or temperature
 */
/**@class GenericData_Entry
 */

}
